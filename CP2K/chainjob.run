#!/bin/sh
#SBATCH -J JOBNAME
#SBATCH --ntasks=49
#SBATCH --mem-per-cpu=2583M
#SBATCH --time=08:00:00
#SBATCH --licenses=scratch
#SBATCH --mail-user=myadress@mydomain.com
#SBATCH --mail-type=ALL
#SBATCH --signal=B:12@600 #send signal 12 to batch script only (B) 10min before kill
##SBATCH --test-only
#exit if any command fails
#set -e #CP2K throws error 140 when using EXIT file
#more advanced pattern matching
shopt -s extglob

########################################################################
# README
# Automatic Restart Script for CP2K to enable long simulations using CP2Ks own restart features.
#
# The PROJECT_NAME will be overwritten with the Jobname from SLURM!
# You should not change the default name of restart files in the CP2K input, otherwise this will not work.
# You can make CP2K print information to other files, e.g. Cell-Info during MD or GEOOPT, these files will just stay and be appended upon restart.
# Set some things in the following section, everything else should be automatic.
#
#
#
########################################################################

######EDIT THESE
#search string for steps
#MD
steps="MAX_STEPS"
#GO
#steps="MAX_ITER"

#Hessian restart file name
#Just leave it like that if you don't intend to use it.
hessian_restart="hessian.restart"

#Maximum number of restarts
MAXCALC=50

#walltime
WALLTIME="07:50:00"

#load modules
module load CP2K/9.1-intel-2021a

CP2KBIN="cp2k.popt"

#MPI Setup
# -nX number of mpi processes total
# -cX number of cores per mpi process
# -G X number of GPUs total
THREADSperCORE=$(lscpu | grep 'Thread(s) per core' | awk '{print $4}')
echo "THREADSperCORE $THREADSperCORE"
echo "SLURM_CPUS_ON_NODE  $SLURM_CPUS_ON_NODE" #full CPU count, not only allocated ones
echo "SLURM_TASKS_PER_NODE  $SLURM_TASKS_PER_NODE" #quest returns N(xnnodes)
echo "SLURM_NTASKS  $SLURM_NTASKS"
echo "SLURM_NPROCS  $SLURM_NPROCS"
echo "SLURM_CPUS_PER_TASK  $SLURM_CPUS_PER_TASK"
TOTALcpu=$(( $SLURM_JOB_NUM_NODES * $SLURM_CPUS_ON_NODE ))
echo "TOTALcpu $TOTALcpu"
if [[ $TOTALcpu != $SLURM_NTASKS ]]; then
   echo "Seems like you are not using full nodes, using SLURM_NTASKS"
   NMPITASKS=$SLURM_NTASKS
else
   NMPITASKS=$(( $TOTALcpu / $THREADSperCORE ))
fi
echo "NMPITAKS $NMPITASKS"

#Should work on most clusters with CPU only and srun
#MPIBIN="srun -n${NMPITASKS} -c${THREADSperCORE} --cpu_bind=cores"
#No automatic way for GPUs yet
#MPIBIN="srun -n16 -c32 --cpu-bind=cores --gpu-bind=single:1 -G 16" #Perlmutter GPU
#Use mpirun instead of srun for older clusters
#MPIBIN="mpirun -n $NMPITASKS" #MPI
MPIBIN="srun --kill-on-bad-exit=1"


###REST SHOULD BE AUTOMATIC

CURRENT=`pwd`
BASENAME=`basename "$CURRENT"`
NAME=${SLURM_JOB_NAME}
INTERRUPTFILE="EXIT"

function terminate()
{
   echo "Caught SLURM signal, writing EXIT file"
   touch $INTERRUPTFILE
}

INPUT="${NAME}.in"
if [ ! -f ${INPUT} ]; then
   echo "input file ${INPUT} missing!"
   exit 1
fi

#set project name in input file
sed -i "s/.*PROJECT_NAME.*/   PROJECT_NAME ${NAME}/" ${INPUT}
#set walltime
sed -i "s/.*WALLTIME.*/   WALLTIME ${WALLTIME}/" ${INPUT}

OUTPUT="${NAME}.out"
SCRIPTNAME="${NAME}.run"
RESTART="${NAME}-1.restart"

MAXSTEPS=`cat ${INPUT} | grep ${steps} | sed 's/[^0-9]*//g'`
if [ -z ${MAXSTEPS} ]; then
   echo "${steps} not found in ${INPUT}, critical error!"
   exit 1
fi

if [ -f "number.txt" ]; then
   typeset -i n=$(cat number.txt) || { echo 'getting number failed' ; exit 1; }
else
   n=0
   echo $n > number.txt
fi
if [ -f "step.txt" ]; then
   typeset -i oldstep=$(cat step.txt) || { echo 'getting step failed' ; exit 1; }
else
   oldstep=0
   echo $oldstep > step.txt
fi

#trap the signal, terminate all children but not the script itself
trap 'terminate; wait' 12 #15 and 18 are getting sent before killing by slurm on quest
$MPIBIN $CP2KBIN -o ${OUTPUT} -i ${INPUT} &
#wait for trap to hit or job to finish
wait

#check output
if [ "$(grep -c "GEOMETRY OPTIMIZATION COMPLETED" ${OUTPUT})" -ge "1" ];
then
   echo "GO completed"
   exit 0
fi
if [ "$(grep -c "PROGRAM ENDED AT" ${OUTPUT})" -ge "1" ];
then
   echo "Program ended normally"
   typeset -i step=$(grep "STEP_START_VAL" $RESTART | awk '{print $NF}') || { echo 'getting step failed' ; exit 1; }
   echo $step > step.txt || { echo 'writing step failed' ; exit 1; }
   if [ "$step" -le "$oldstep" ]; then
      echo "Step did not increase during run - Problem!"
      exit 1
   fi
   echo "Step Number: $step"
   if [ "$step" -ge "$MAXSTEPS" ]; then
      echo "Final step reached"
      exit 0
   fi
else
   echo "Non-normal program termination"
   exit 1
fi

#move files to subfolder $N
mkdir ${n} || { echo 'mkdir failed' ; exit 1; }
#find . -maxdepth 1 -type f  ! -name '*.txt' -exec mv {} ./${n}/ \; || { echo 'moving files failed' ; exit 1; }
#create list of all files to move
MVFILES=("${INPUT}" "slurm-"* "$OUTPUT")
#regex have to be handled manually to avoid mv errors if they do not exist
for f in "${NAME}"-*([0-9])_*([0-9]).restart; do
   if [ -e "$f" ]; then
      MVFILES+=("${NAME}-*([0-9])_*([0-9]).restart")
   fi
   break
done
for f in "${NAME}"-*([0-9]).restart.bak*; do
   if [ -e "$f" ]; then
      MVFILES+=("${NAME}-*([0-9]).restart.bak*")
   fi
   break
done
#now move the files
for file in "${MVFILES[@]}"
do
   mv ${file} ./${n}/ || { echo 'mv ${file} failed' ; exit 1; }
done

#copy restart file to input
cp "${RESTART}" "${INPUT}" || { echo 'copying restart to input failed' ; exit 1; }
mv "${RESTART}" ./${n}/ || { echo 'moving restart file failed'; exit 1; }

#activate hessian restart after first run if present
if [ -f "${hessian_restart}" ]; then
   if [ "${n}" -eq "0" ]; then
      sed -i '/.*\&BFGS.*/a\       RESTART_HESSIAN  T\n       RESTART_FILE_NAME hessian.restart' ${INPUT}
   fi
fi


#increase n and restart
n=$((n+1))
if [ "$n" -ge "$MAXCALC" ]; then
   echo "MAXCALC reached, PROBLEM!"
   exit 1
fi
echo $n > number.txt

#increase counter in scriptfile
#sed -i "2s/.*/#SBATCH -J ${NAME}-${n}/" $SCRIPTNAME || { echo 'naming job failed' ; exit 1; }
#submit
sbatch $SCRIPTNAME

exit 0
